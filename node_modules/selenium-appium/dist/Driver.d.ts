/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Locator, WebDriver, Capabilities, WebElement, WebElementPromise, FileDetector, Session, Actions, WebElementCondition, Condition, Options, Navigation, TargetLocator } from 'selenium-webdriver';
import { Command, Executor } from 'selenium-webdriver/lib/command';
interface IWebDriver2 extends WebDriver {
    isActive(): Promise<boolean>;
    lastError(): any;
}
export declare class WebDriver2 implements IWebDriver2 {
    /**
    *   @see WebDriver.wait
    */
    wait(condition: WebElementCondition, opt_timeout?: number | undefined, opt_message?: string | undefined): WebElementPromise;
    /**
   *   @see WebDriver.wait
  */
    wait2<T>(condition: Function | PromiseLike<T> | Condition<T> | ((driver: WebDriver) => T | PromiseLike<T>), opt_timeout?: number | undefined, opt_message?: string | undefined): Promise<T>;
    /**
  *   @see WebDriver.sleep
  */
    sleep(ms: number): Promise<void>;
    /**
  *   @see WebDriver.execute
  */
    execute<T>(command: Command, description?: string | undefined): Promise<T>;
    /**
  *   @see WebDriver.setFileDetector
  */
    setFileDetector(detector: FileDetector): void;
    /**
  *   @see WebDriver.getExecutor
  */
    getExecutor(): Executor;
    /**
  *   @see WebDriver.getSession
  */
    getSession(): Promise<Session>;
    /**
  *   @see WebDriver.getCapabilities
  */
    getCapabilities(): Promise<Capabilities>;
    /**
  *   @see WebDriver.quit
  */
    quit(): Promise<void>;
    /**
  *   @see WebDriver.actions
  */
    actions(options?: {
        async: boolean;
        bridge: boolean;
    } | {
        async: boolean;
    } | {
        bridge: boolean;
    } | undefined): Actions;
    /**
  *   @see WebDriver.executeScript
  */
    executeScript<T>(script: string | Function, ...var_args: any[]): Promise<T>;
    /**
  *   @see WebDriver.executeAsyncScript
  */
    executeAsyncScript<T>(script: string | Function, ...var_args: any[]): Promise<T>;
    /**
  *   @see WebDriver.getWindowHandle
  */
    getWindowHandle(): Promise<string>;
    /**
    *   @see WebDriver.getAllWindowHandles
    */
    getAllWindowHandles(): Promise<string[]>;
    /**
    *   @see WebDriver.getPageSource
    */
    getPageSource(): Promise<string>;
    /**
    *   @see WebDriver.close
    */
    close(): Promise<void>;
    /**
    *   @see WebDriver.get
    */
    get(url: string): Promise<void>;
    /**
    *   @see WebDriver.getCurrentUrl
    */
    getCurrentUrl(): Promise<string>;
    /**
    *   @see WebDriver.getTitle
    */
    getTitle(): Promise<string>;
    /**
    *   @see WebDriver.findElement
    */
    findElement(locator: Locator): WebElementPromise;
    /**
    *   @see WebDriver.findElements
    */
    findElements(locator: Locator): Promise<WebElement[]>;
    /**
    *   @see WebDriver.takeScreenshot
    */
    takeScreenshot(): Promise<string>;
    /**
    *   @see WebDriver.manage
    */
    manage(): Options;
    /**
    *   @see WebDriver.navigate
    */
    navigate(): Navigation;
    /**
    *   @see WebDriver.switchTo
    */
    switchTo(): TargetLocator;
    get seleniumDriver(): WebDriver;
    lastError(): any;
    startWithWebDriver(webDriver: WebDriver): void;
    startWithCapabilities(capabilities: {} | Capabilities, url?: string): Promise<void>;
    private error_?;
    private webDriver?;
    isActive(): Promise<boolean>;
    toString(): string;
}
export declare const driver: WebDriver2;
export {};
