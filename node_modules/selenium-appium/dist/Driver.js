/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.driver = exports.WebDriver2 = void 0;
// eslint-disable-next-line import/no-unresolved
const selenium_webdriver_1 = require("selenium-webdriver");
class WebDriver2 {
    /**
    *   @see WebDriver.wait
    */
    wait(condition, opt_timeout, opt_message) {
        return this.seleniumDriver.wait(condition, opt_timeout, opt_message);
    }
    /**
   *   @see WebDriver.wait
  */
    wait2(condition, opt_timeout, opt_message) {
        return this.seleniumDriver.wait(condition, opt_timeout, opt_message);
    }
    /**
  *   @see WebDriver.sleep
  */
    sleep(ms) {
        return this.seleniumDriver.sleep(ms);
    }
    /**
  *   @see WebDriver.execute
  */
    execute(command, description) {
        return this.seleniumDriver.execute(command, description);
    }
    /**
  *   @see WebDriver.setFileDetector
  */
    setFileDetector(detector) {
        return this.seleniumDriver.setFileDetector(detector);
    }
    /**
  *   @see WebDriver.getExecutor
  */
    getExecutor() {
        return this.seleniumDriver.getExecutor();
    }
    /**
  *   @see WebDriver.getSession
  */
    getSession() {
        return this.seleniumDriver.getSession();
    }
    /**
  *   @see WebDriver.getCapabilities
  */
    getCapabilities() {
        return this.seleniumDriver.getCapabilities();
    }
    /**
  *   @see WebDriver.quit
  */
    quit() {
        return new Promise((resolve, reject) => {
            if (this.webDriver) {
                this.webDriver
                    .quit()
                    .then(() => { this.webDriver = undefined; resolve(); })
                    .catch(e => { this.error_ = e; reject(e); });
            }
            else {
                resolve();
            }
        });
    }
    /**
  *   @see WebDriver.actions
  */
    actions(options) {
        return this.seleniumDriver.actions(options);
    }
    /**
  *   @see WebDriver.executeScript
  */
    executeScript(script, ...var_args) {
        return this.seleniumDriver.executeScript(script, var_args);
    }
    /**
  *   @see WebDriver.executeAsyncScript
  */
    executeAsyncScript(script, ...var_args) {
        return this.seleniumDriver.executeAsyncScript(script, var_args);
    }
    /**
  *   @see WebDriver.getWindowHandle
  */
    getWindowHandle() {
        return this.seleniumDriver.getWindowHandle();
    }
    /**
    *   @see WebDriver.getAllWindowHandles
    */
    getAllWindowHandles() {
        return this.seleniumDriver.getAllWindowHandles();
    }
    /**
    *   @see WebDriver.getPageSource
    */
    getPageSource() {
        return this.seleniumDriver.getPageSource();
    }
    /**
    *   @see WebDriver.close
    */
    close() {
        return this.seleniumDriver.close();
    }
    /**
    *   @see WebDriver.get
    */
    get(url) {
        return this.seleniumDriver.get(url);
    }
    /**
    *   @see WebDriver.getCurrentUrl
    */
    getCurrentUrl() {
        return this.seleniumDriver.getCurrentUrl();
    }
    /**
    *   @see WebDriver.getTitle
    */
    getTitle() {
        return this.seleniumDriver.getTitle();
    }
    /**
    *   @see WebDriver.findElement
    */
    findElement(locator) {
        return this.seleniumDriver.findElement(locator);
    }
    /**
    *   @see WebDriver.findElements
    */
    findElements(locator) {
        return this.seleniumDriver.findElements(locator);
    }
    /**
    *   @see WebDriver.takeScreenshot
    */
    takeScreenshot() {
        return this.seleniumDriver.takeScreenshot();
    }
    /**
    *   @see WebDriver.manage
    */
    manage() {
        return this.seleniumDriver.manage();
    }
    /**
    *   @see WebDriver.navigate
    */
    navigate() {
        return this.seleniumDriver.navigate();
    }
    /**
    *   @see WebDriver.switchTo
    */
    switchTo() {
        return this.seleniumDriver.switchTo();
    }
    get seleniumDriver() {
        if (this.webDriver)
            return this.webDriver;
        throw new Error("no valid connection");
    }
    lastError() {
        return this.error_;
    }
    startWithWebDriver(webDriver) {
        this.webDriver = webDriver;
    }
    startWithCapabilities(capabilities, url = "http://localhost:4723") {
        return new Promise((resolve, reject) => {
            if (capabilities) {
                new selenium_webdriver_1.Builder()
                    .usingServer(url)
                    .withCapabilities(capabilities)
                    .build()
                    .then(driver => { this.webDriver = driver; resolve(); })
                    .catch(e => { this.error_ = e; reject(e); });
            }
            else {
                reject("capabilities is not set");
            }
        });
    }
    isActive() {
        return new Promise(resolve => {
            if (this.webDriver) {
                this.webDriver.getSession().then(() => resolve(true), reason => resolve(false));
            }
            else {
                resolve(false);
            }
        });
    }
    toString() {
        return 'WebDriver2';
    }
}
exports.WebDriver2 = WebDriver2;
exports.driver = new WebDriver2();
//# sourceMappingURL=Driver.js.map