/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { By, Locator, WebDriver, ISize, IRectangle, ILocation, IWebElementId, WebElement, WebElementPromise } from 'selenium-webdriver';
import { WebDriver2 } from './Driver';
interface IWebElement extends WebElement {
}
interface IBy extends By {
}
export declare class By2 implements IWebElement, IBy {
    using: string;
    value: string;
    toString(): string;
    private get webElement();
    getDriver(): WebDriver;
    getId(): Promise<string>;
    findElement(locator: Locator): WebElementPromise;
    findElements(locator: Locator): Promise<WebElement[]>;
    click(): Promise<void>;
    sendKeys(...var_args: (string | number | Promise<string | number>)[]): Promise<void>;
    getTagName(): Promise<string>;
    getCssValue(cssStyleProperty: string): Promise<string>;
    getAttribute(attributeName: string): Promise<string>;
    getText(): Promise<string>;
    getSize(): Promise<ISize>;
    getRect(): Promise<IRectangle>;
    getLocation(): Promise<ILocation>;
    isEnabled(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    submit(): Promise<void>;
    clear(): Promise<void>;
    isDisplayed(): Promise<boolean>;
    takeScreenshot(opt_scroll?: boolean): Promise<string>;
    serialize(): Promise<IWebElementId>;
    private webDriver2_?;
    constructor(using: string, value: string, webDriver2?: WebDriver2);
    /**
     * Locates elements that have a specific class name.
     *
     * @param {string} name The class name to search for.
     * @return {!By} The new locator.
     * @see http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#classes
     * @see http://www.w3.org/TR/CSS2/selector.html#class-html
     */
    static className(name: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates elements using a CSS selector.
     *
     * @param {string} selector The CSS selector to use.
     * @return {!By} The new locator.
     * @see http://www.w3.org/TR/CSS2/selector.html
     */
    static css(selector: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates eleemnts by the ID attribute. This locator uses the CSS selector
     * `*[id='$ID']`, _not_ `document.getElementById`.
     *
     * @param {string} id The ID to search for.
     * @return {!By} The new locator.
     */
    static id(id: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates link elements whose
     * {@linkplain WebElement#getText visible text} matches the given
     * string.
     *
     * @param {string} text The link text to search for.
     * @return {!By} The new locator.
     */
    static linkText(text: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates elements whose `name` attribute has the given value. This locator uses the CSS selector
     *
     * @param {string} name The name attribute to search for.
     * @return {!By} The new locator.
     */
    static name2(name: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates link elements whose
     * {@linkplain WebElement#getText visible text} contains the given
     * substring.
     *
     * @param {string} text The substring to check for in a link's visible text.
     * @return {!By} The new locator.
     */
    static partialLinkText(text: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates elements with a given tag name. This locator uses the CSS selector
     *
     * @param {string} name The tag name to search for.
     * @return {!By} The new locator.
     * @deprecated Use {@link By.css() By.css(tagName)} instead.
     */
    static tagName(name: string, webDriver2?: WebDriver2): By2;
    /**
     * Locates elements matching a XPath selector. Care should be taken when
     * using an XPath selector with a {@link WebElement} as WebDriver
     * will respect the context in the specified in the selector. For example,
     * given the selector `//div`, WebDriver will search from the document root
     * regardless of whether the locator was used with a WebElement.
     *
     * @param {string} xpath The XPath selector to use.
     * @return {!By} The new locator.
     * @see http://www.w3.org/TR/xpath/
     */
    static xpath(xpath: string, webDriver2?: WebDriver2): By2;
    static from(by: By, webDriver2?: WebDriver2): By2;
    /**
     * "using": "name", only for WinAppDriver
     * @param name
     * @param webDriver2
     */
    static nativeName(name: string, webDriver2?: WebDriver2): By2;
    /**
     * "using": "class name"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param className
     * @param webDriver2
     */
    static nativeClassName(className: string, webDriver2?: WebDriver2): By2;
    /**
     * "using": "accessibility id"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param accessibilityId
     * @param webDriver2
     */
    static nativeAccessibilityId(accessibilityId: string, webDriver2?: WebDriver2): By2;
    /**
     * "using": "xpath"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param xpath
     * @param webDriver2
     */
    static nativeXpath(xpath: string, webDriver2?: WebDriver2): By2;
    /**
     * "using": "id"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param id
     * @param webDriver2
     */
    static nativeId(id: string, webDriver2?: WebDriver2): By2;
    /**
     * "using": "-android uiautomator"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param uiautomator
     * @param webDriver2
     */
    static nativeAndriod(uiautomator: string, webDriver2?: WebDriver2): By2;
    /** "using": "-ios uiautomator"
     * @see https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#locator-strategies
     * @param uiautomator
     * @param webDriver2
     */
    static nativeIos(uiautomator: string, webDriver2?: WebDriver2): By2;
}
export {};
